name: Main CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            backend:
              - 'wallzen-backend/**'
            frontend:
              - 'wallzen-frontend/**'

  trigger-backend:
    needs: changes
    if: ${{ needs.changes.outputs.backend == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      
      - name: Trigger Backend Workflow
        run: |
          cd wallzen-backend
          gh workflow run ci.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  trigger-frontend:
    needs: changes
    if: ${{ needs.changes.outputs.frontend == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      
      - name: Trigger Frontend Workflow
        run: |
          cd wallzen-frontend
          gh workflow run ci.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-project-release:
    needs: [trigger-backend, trigger-frontend]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Get Current Date
        id: date
        run: echo "date=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT

      - name: Get Submodule Versions
        id: versions
        run: |
          echo "backend=$(cd wallzen-backend && git rev-parse HEAD)" >> $GITHUB_OUTPUT
          echo "frontend=$(cd wallzen-frontend && git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Create Project Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Wallzen v${{ github.run_number }}
          body: |
            🎉 Wallzen Release v${{ github.run_number }}
            
            📅 Release Date: ${{ steps.date.outputs.date }}
            👤 Released by: ${{ github.actor }}
            
            📦 Components:
            - Backend: ${{ steps.versions.outputs.backend }}
            - Frontend: ${{ steps.versions.outputs.frontend }}
            
            📝 Changes:
            ${{ github.event.head_commit.message }}
            
            🔗 Main Commit: ${{ github.sha }}
          draft: false
          prerelease: false